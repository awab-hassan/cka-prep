kubectl create ingress echo --namespace sound-repeater --rule="example.org/echo=echoserver-service:8080" 

dpkg -i package_name
apt update -y && apt-get install -f -y && apt-get install procps
systemctl enable cri-docker.service
systemctl enable cri-docker.server
systemctl start cri-docker.service
systemctl start cri-docker.socket
ps aux | grep cri 
vim /etc/systctl.d/any.conf
Set net.bridge.bridge-nf-call-iptables to 1  
Set net.ipv6.conf.allforwarding to 1 
Set net.ipv4.ip_forward to 1 
Set net.netfilter.nf_conntrack_max to 131072 
systemctl restart systemd-sysctl
sysctl --system

scale 0
cpu: "180m" 
memory: "360Mi" 
scale 3

volumes: 
    - name: log-volume 
      emptyDir: {} 
volumeMounts: 
- name: log-volume 
  mountPath: /var/log 
kubectl rollout restart deployment synergy-leverager 

ports: - containerPort: 80 
protocol: TCP 

kubectl create priorityclass high-priority --value=999999999 --description="High priority for user 
workloads"
priorityClassName: high-priority

helm repo add https://argoproj.github.io/argo-helm
helm update
helm template argocd argo/argo-cd --version 7.7.8 --namespace name --set crds.install=false > /argo-helm.yaml
helm install argocd argo/argo-cd --namespace argocd --set crds.install=false

kubectl get pv 
kubectl describe pv <PV-NAME>
spec: 
  storageClassName: local-path
apiVersion: v1 
kind: PersistentVolumeClaim 
metadata: 
  name: mariadb 
  namespace: mariadb 
spec: 
  accessModes: 
    - ReadWriteOnce 
  resources: 
    requests: 
      storage: 250Mi 
 volumeName:  # Pv name  
 storageClassName: local-path

volumes: 
      - name: mariadb-storage 
        persistentVolumeClaim: 
          claimName: mariadb

apiVersion: gateway.networking.k8s.io/v1beta1 
kind: Gateway 
metadata: 
  name: web-gateway 
spec: 
  gatewayClassName: nginx 
  listeners: 
  - name: https 
    protocol: HTTPS 
    port: 443 
    hostname: "gateway.web.k8s.local"
      tls: 
      mode: Terminate 
      certificateRefs: 
      - kind: Secret 
        name: web-tls-secret  # Using the same TLS secret as the Ingress 
       group: “” 

apiVersion: gateway.networking.k8s.io/v1beta1 
kind: HTTPRoute 
metadata: 
  name: web-route 
  namespace: default 
spec: 
  parentRefs: 
  - name: web-gateway 
  hostnames: 
  - "gateway.web.k8s.local" 
  rules: 
  - matches: 
    - path: 
        type: PathPrefix 
        value: "/" 
    backendRefs: 
    - name: web # Same service as in Ingress 
      port: 80 

piVersion: networking.k8s.io/v1 
kind: NetworkPolicy 
metadata: 
  name: allow-frontend-to-backend 
  namespace: backend 
spec: 
  podSelector: 
    matchLabels: 
      app: backend 
  ingress: 
    - from: 
        - namespaceSelector: 
            matchLabels: 
              kubernetes.io/metadata.name: frontend 
        - podSelector: 
            matchLabels: 
              app: frontend 
      ports: 
        - protocol: TCP 
          port: 80 
  policyTypes: 
    - Ingress

List Cert-Manager CRDs and Save to /resources.yaml 
kubectl get crds | grep cert-manager.io > /resources.yaml 
Extract the subject Field Documentation from the Certificate CRD 
kubectl explain certificate.spec.subject > /subject.yaml

Save the configmap to yaml 
kubectl get configmaps -n nginx-static nginx-config -o yaml > configmap.yaml 
Edit the ConfigMap to enforce only TLS 1.3: 
nano configmap.yaml 
Remove 1.2 
ssl_protocols TLSv1.3; 
Scale up the deployment 
kubectl scale –deployment –nginx-static -n nginx-static –replicas 1 
Run the test command: 
curl --tls-max 1.2 https://web.k8s.local 
If TLS 1.2 is blocked, the command should fail. 
You can also test with TLS 1.3 to ensure it's working: 
curl --tls-max 1.3 https://web.k8s.local 
This should succeed. 
