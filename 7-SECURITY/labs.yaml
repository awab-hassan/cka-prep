apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: akshay
spec:
  usages: ["client auth"]
  signerName: kubernetes.io/kube-apiserver-client
  request: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ1ZqQ0NBVDRDQVFBd0VURVBNQTBHQTFVRUF3d0dZV3R6YUdGNU1JSUJJakFOQmdrcWhraUc5dzBCQVFFRgpBQU9DQVE4QU1JSUJDZ0tDQVFFQTVLMTVpbGgyL0x2Z2NkbmlmWHZmWEtUOGhxb29lV3l3OTZKQ1BNUlp0dTNNCkt2TkZpaVNvMTVyMVRERVpESmhva3l6dkhLOWFITTVrMHBiL29WSkxXNEZERzNHMHJaeGxHNnA2cFYzUGJkd1AKUFVWVS9YNnRGeldYVnBydjI5RTFiektkbjZhaWU3VXdYV0tIbWc0UXJMT1JOMmw4QlUyUFo1Q3F5OFU0cWNRRApWNExmcy9nY0tqemUwM2NZY05MbmlVeG9KU0Y4ZHdWeHlUUTB5ZUxkMXBHQVUzcTNMNlVTK0lhR3cvdDlxN0t6CmNQdkFpbDFRTUJ6ei9uK3REcldDbGJqN2JUaFlubTJOVTM5TXFBM0JiMkg5am9USVFxN3FpeU9vWUNtWFo0MmoKYnlrdjd0MTZIT0hMd2EraHQxRWhiQjljSmsxcEpFVm13dkNXTWdtWHR3SURBUUFCb0FBd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBRkZWbDJqRDlSWmlDN0pGbjk4eXlxaktMU2ltcWhsMkV3Y3hnTXB6akZScTJMNnRSbU50CkRBZ25nQWlQYy81b3I5OUphOGRyK1lXUTA0NWZuelJ0YXgwcEJGNEEvMC9sT0dOUnZvbGpXR2dNRzgrT0czTW8KamRTVDNuMmI5N3dLVll6NjZVYmdPdUd2SGE0NVptcXhVUkVBRWMxcnJDOXZhcWpCQ3hqeUtaNGwzNGVtVWN0aQpjaEhoNkZFNFZ0QXN2Qnp4Q2ZDbm5abzNGSVNIbW42VytJVjZjRDdNaFh1Z1lTOHVhdUdNYjYzN3d6T05DMVF3CnZtaXFXTGZxQ3E3RkVqNWNnQTNyaXhnZ0t1cW5xUUZzaGw0WmFZMjhVNUp6WTQrQzhhV09ENDBHNGJtWHh2L2oKdU5vT2NSOEhnWG1kZ25ubWtWR3dUWXRJSWt3MC9yOUlhQ2s9Ci0tLS0tRU5EIENFUlRJRklDQVRFIFJFUVVFU1QtLS0tLQo=
~                                                                            

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name:  developer
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["create", "delete", "list"]

apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "jane" to read pods in the "default" namespace.
# You need to already have a Role named "pod-reader" in that namespace.
kind: RoleBinding
metadata:
  name: dev-user-binding
  namespace: default
subjects:
# You can specify more than one "subject"
- kind: User
  name: dev-user # "name" is case sensitive
  apiGroup: rbac.authorization.k8s.io
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: Role #this must be Role or ClusterRole
  name: developer # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io


apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  # "namespace" omitted since ClusterRoles are not namespaced
  name: michelle-npdes
rules:
- apiGroups: [""]
  #
  # at the HTTP level, the name of the resource for accessing Secret
  # objects is "secrets"
  resources: ["nodes"]
  verbs: ["*"]

apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "jane" to read pods in the "default" namespace.
# You need to already have a Role named "pod-reader" in that namespace.
kind: RoleBinding
metadata:
  name: michelle-npdes-binding
  namespace: default
subjects:
# You can specify more than one "subject"
- kind: User
  name: michelle # "name" is case sensitive
  apiGroup: rbac.authorization.k8s.io
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: Role #this must be Role or ClusterRole
  name: michelle-npdes # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  # "namespace" omitted since ClusterRoles are not namespaced
  name: storage-admin
rules:
- apiGroups: [""]
  #
  # at the HTTP level, the name of the resource for accessing Secret
  # objects is "secrets"
  resources: ["persistentvolumes"]
  verbs: ["*"]
- apiGroups: [""]
  #
  # at the HTTP level, the name of the resource for accessing Secret
  # objects is "secrets"
  resources: ["storageclasses"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "jane" to read pods in the "default" namespace.
# You need to already have a Role named "pod-reader" in that namespace.
kind: ClusterRoleBinding
metadata:
  name: michelle
  namespace: default
subjects:
# You can specify more than one "subject"
- kind: User
  name: michelle # "name" is case sensitive
  apiGroup: rbac.authorization.k8s.io
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: ClusterRole #this must be Role or ClusterRole
  name: storage-admin # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io

kubectl create secret docker-registry private-reg-cred --docker-username=dock_user --docker-password=dock_password --docker-email=dock_user@myprivateregistry.com --docker-server="myprivateregistry.com:5000"

---
apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-sleeper
  namespace: default
spec:
  containers:
  - command:
    - sleep
    - "4800"
    image: ubuntu
    name: ubuntu-sleeper
    securityContext:
      capabilities:
        add: ["SYS_TIME"]
---
apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-sleeper
  namespace: default
spec:
  containers:
  - command:
    - sleep
    - "4800"
    image: ubuntu
    name: ubuntu-sleeper
    securityContext:
      capabilities:
        add: ["SYS_TIME", "NET_ADMIN"]
---
apiVersion: v1
kind: Pod
metadata:
  name: multi-pod
spec:
  securityContext:
    runAsUser: 1001
  containers:
  -  image: ubuntu
     name: web
     command: ["sleep", "5000"]
     securityContext:
      runAsUser: 1002

  -  image: ubuntu
     name: sidecar
     command: ["sleep", "5000"]
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: internal-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      role: db
  policyTypes:
  - Egress
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/24
    ports:
    - protocol: TCP
      port: 5978
  podSelector:
    matchLabels:
      name: payroll

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: internal-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      name: internal
  policyTypes:
  - Egress
  - Ingress
  ingress:
    - {}
  egress:
  - to:
    - podSelector:
        matchLabels:
          name: mysql
    ports:
    - protocol: TCP
      port: 3306
  - to:
    - podSelector:
        matchLabels:
          name: payroll
    ports:
    - protocol: TCP
      port: 8080
  - ports:
    - port: 53
      protocol: UDP
    - port: 53
      protocol: TCP
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: internals.datasets.kodekloud.com
spec:
  group: datasets.kodekloud.com
  scope: Namespaced
  names:
    plural: internals
    singular: internal
    kind: Internal
    shortNames:
    - int
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            properties:
              internalLoad:
                type: string
              range:
                type: integer
              percentage:
                type: string
---
---
kind: Internal
apiVersion: datasets.kodekloud.com/v1
metadata:
  name: internal-space
  namespace: default
spec:
  internalLoad: "high"
  range: 80
  percentage: "50"
---
kind: Global
apiVersion: traffic.controller/v1
metadata:
  name: datacenter
  namespace: default
spec:
  dataField: 2
  access: true
 